
BobCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fbc  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a77  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a9  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c0  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	9a 00       	.word	0x009a	; ????
  6a:	a6 00       	.word	0x00a6	; ????
  6c:	94 00       	.word	0x0094	; ????
  6e:	a8 00       	.word	0x00a8	; ????
  70:	96 00       	.word	0x0096	; ????
  72:	a6 00       	.word	0x00a6	; ????
  74:	a6 00       	.word	0x00a6	; ????
  76:	9e 00       	.word	0x009e	; ????
  78:	a6 00       	.word	0x00a6	; ????
  7a:	a6 00       	.word	0x00a6	; ????
  7c:	a0 00       	.word	0x00a0	; ????
  7e:	a6 00       	.word	0x00a6	; ????
  80:	a6 00       	.word	0x00a6	; ????
  82:	a6 00       	.word	0x00a6	; ????
  84:	92 00       	.word	0x0092	; ????
  86:	a6 00       	.word	0x00a6	; ????
  88:	9c 00       	.word	0x009c	; ????
  8a:	a6 00       	.word	0x00a6	; ????
  8c:	a6 00       	.word	0x00a6	; ????
  8e:	a6 00       	.word	0x00a6	; ????
  90:	a6 00       	.word	0x00a6	; ????
  92:	a4 00       	.word	0x00a4	; ????
  94:	a6 00       	.word	0x00a6	; ????
  96:	98 00       	.word	0x0098	; ????
  98:	a6 00       	.word	0x00a6	; ????
  9a:	a6 00       	.word	0x00a6	; ????
  9c:	a6 00       	.word	0x00a6	; ????
  9e:	a6 00       	.word	0x00a6	; ????
  a0:	a6 00       	.word	0x00a6	; ????
  a2:	a6 00       	.word	0x00a6	; ????
  a4:	a6 00       	.word	0x00a6	; ????
  a6:	a6 00       	.word	0x00a6	; ????
  a8:	a6 00       	.word	0x00a6	; ????
  aa:	a6 00       	.word	0x00a6	; ????
  ac:	a6 00       	.word	0x00a6	; ????
  ae:	a6 00       	.word	0x00a6	; ????
  b0:	a6 00       	.word	0x00a6	; ????
  b2:	a6 00       	.word	0x00a6	; ????
  b4:	a6 00       	.word	0x00a6	; ????
  b6:	a6 00       	.word	0x00a6	; ????
  b8:	a6 00       	.word	0x00a6	; ????
  ba:	a6 00       	.word	0x00a6	; ????
  bc:	a2 00       	.word	0x00a2	; ????
  be:	2f 01       	movw	r4, r30
  c0:	34 01       	movw	r6, r8
  c2:	39 01       	movw	r6, r18
  c4:	3e 01       	movw	r6, r28
  c6:	43 01       	movw	r8, r6
  c8:	48 01       	movw	r8, r16
  ca:	4d 01       	movw	r8, r26

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e7       	ldi	r30, 0x7E	; 126
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 30       	cpi	r26, 0x02	; 2
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a2 e0       	ldi	r26, 0x02	; 2
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 30       	cpi	r26, 0x02	; 2
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 c9 00 	call	0x192	; 0x192 <main>
 102:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <CTRL_GetCommand>:
	UART_putstring(&message[0]);
}

enum commands CTRL_GetCommand(){
	char received_char;
	received_char = UART_read();
 10a:	0e 94 92 01 	call	0x324	; 0x324 <UART_read>
	
	switch(received_char){
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	e3 54       	subi	r30, 0x43	; 67
 114:	f1 09       	sbc	r31, r1
 116:	eb 32       	cpi	r30, 0x2B	; 43
 118:	f1 05       	cpc	r31, r1
 11a:	c0 f4       	brcc	.+48     	; 0x14c <CTRL_GetCommand+0x42>
 11c:	ec 5c       	subi	r30, 0xCC	; 204
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__tablejump2__>
		case 'F':
			return FORWARD;
			break;
		case 'Q':
			return FORWARD_LEFT;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
			break;
		case 'E':
			return FORWARD_RIGHT;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	08 95       	ret
			break;
		case 'G':
			return BACKWARDS;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	08 95       	ret
			break;
		case 'Z':
			return BACKWARDS_LEFT;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	08 95       	ret
			break;
		case 'C':
			return BACKWARDS_RIGHT;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	08 95       	ret
			break;
		case 'S':
			return NEUTRAL;
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	08 95       	ret
			break;
		case 'J':
			return POWER;
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	08 95       	ret
			break;
		case 'M':
			return LIGHTS_ON;
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	08 95       	ret
			break;
		case 'm':
			return LIGHTS_OFF;
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	08 95       	ret
			break;
		case 'X':
			return BEEP;
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	08 95       	ret
			break;
		default:
			return UNKNOWN;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	08 95       	ret
	char received_char;
	received_char = UART_read();
	
	switch(received_char){
		case 'F':
			return FORWARD;
 150:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return UNKNOWN;
			break;
	}
 152:	08 95       	ret

00000154 <Init_Timer0>:
/* Init_Timer0
*  Initialize Timer0 for Fast PWM on pin 5 (BUZZER)
*/
void Init_Timer0() {
	//		  tmr 8-bit					  | toggle pin 5
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0B1);
 154:	84 b5       	in	r24, 0x24	; 36
 156:	83 62       	ori	r24, 0x23	; 35
 158:	84 bd       	out	0x24, r24	; 36
	
	//		  prescaler 1
	TCCR0B |= (1 << WGM02);
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 0x40;
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	87 bd       	out	0x27, r24	; 39
 164:	08 95       	ret

00000166 <LnS_Init>:

/* LnS_Init
 * initialize lights and buzzer pins as outputs and set to 0
 */
void LnS_Init(){
	DDRC |= (1 << PIN_MAIN_LIGHTS);
 166:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PIN_BACKWARD_LIGHTS);
 168:	39 9a       	sbi	0x07, 1	; 7
	DDRC |= (1 << PIN_BREAK_LIGHTS);
 16a:	3a 9a       	sbi	0x07, 2	; 7
	DDRD |= (1 << PIN_BUZZER);
 16c:	55 9a       	sbi	0x0a, 5	; 10
	PORTC &= ~(1 << PIN_MAIN_LIGHTS);
 16e:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1 << PIN_BACKWARD_LIGHTS);
 170:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << PIN_BREAK_LIGHTS);
 172:	42 98       	cbi	0x08, 2	; 8
	PORTD &= ~(1 << PIN_BUZZER);
 174:	5d 98       	cbi	0x0b, 5	; 11
	Init_Timer0();
 176:	0e 94 aa 00 	call	0x154	; 0x154 <Init_Timer0>
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
		TCCR0B &= (0 << CS02);	
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	15 bc       	out	0x25, r1	; 37
 17e:	08 95       	ret

00000180 <LnS_BuzzerSwitch>:
/* LnS_BuzzerSwitch
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
 180:	89 2b       	or	r24, r25
 182:	19 f4       	brne	.+6      	; 0x18a <LnS_BuzzerSwitch+0xa>
		TCCR0B &= (0 << CS02);	
 184:	85 b5       	in	r24, 0x25	; 37
 186:	15 bc       	out	0x25, r1	; 37
 188:	08 95       	ret
	else
		TCCR0B |= (1 << CS02);					//16Mhz / (1 * 255) = 62kHz}
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	85 bd       	out	0x25, r24	; 37
 190:	08 95       	ret

00000192 <main>:
#include "powertrain.h"
#include <avr/io.h>

int main(void)
{	
	UART_init(9600, true, true);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	95 e2       	ldi	r25, 0x25	; 37
 19a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_init>
	enum commands command;
	
	POWTR_Init();
 19e:	0e 94 ed 00 	call	0x1da	; 0x1da <POWTR_Init>
	LnS_Init();
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <LnS_Init>
	
	LnS_BuzzerSwitch(ON);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 c0 00 	call	0x180	; 0x180 <LnS_BuzzerSwitch>
	{
		// read sensors
		
		
		// read commands from controller
		if(UART_available()){
 1ae:	0e 94 8c 01 	call	0x318	; 0x318 <UART_available>
 1b2:	88 23       	and	r24, r24
 1b4:	e1 f3       	breq	.-8      	; 0x1ae <main+0x1c>
			command = CTRL_GetCommand();
 1b6:	0e 94 85 00 	call	0x10a	; 0x10a <CTRL_GetCommand>
			if((int)command <= 7){
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	c0 f7       	brcc	.-16     	; 0x1ae <main+0x1c>
				POWTR_SendCommand(command);
 1be:	0e 94 26 01 	call	0x24c	; 0x24c <POWTR_SendCommand>
 1c2:	f5 cf       	rjmp	.-22     	; 0x1ae <main+0x1c>

000001c4 <Timer2_Init>:
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 1c4:	e0 eb       	ldi	r30, 0xB0	; 176
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	83 68       	ori	r24, 0x83	; 131
 1cc:	80 83       	st	Z, r24
 1ce:	e1 eb       	ldi	r30, 0xB1	; 177
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <POWTR_Init>:
/* POWTR_init
 * Initialize motoros PWM, pins as outputs and set them to LOW
 */
void POWTR_Init(){
	// driving motor pins
	DDRD |= (1 << PIN_BWD);
 1da:	54 9a       	sbi	0x0a, 4	; 10
	DDRC |= (1 << PIN_FWD);
 1dc:	3d 9a       	sbi	0x07, 5	; 7
	DDRB |= (1 << PIN_POWER);
 1de:	23 9a       	sbi	0x04, 3	; 4
	PORTD &= ~(1 << PIN_BWD);
 1e0:	5c 98       	cbi	0x0b, 4	; 11
	PORTC &= ~(1 << PIN_FWD);
 1e2:	45 98       	cbi	0x08, 5	; 8
	PORTB &= ~(1 << PIN_POWER);
 1e4:	2b 98       	cbi	0x05, 3	; 5
	
	// turning motor pins
	DDRD |= (1 << PIN_TURN_L);
 1e6:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PIN_TURN_R);
 1e8:	20 9a       	sbi	0x04, 0	; 4
	PORTD &= ~(1 << PIN_TURN_L);
 1ea:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 1ec:	28 98       	cbi	0x05, 0	; 5
	
	Timer2_Init();
 1ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Timer2_Init>
 1f2:	08 95       	ret

000001f4 <POWTR_TurnLeft>:
/* POWTR_TurnLeft
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnLeft(){
	PORTD |= (1 << PIN_TURN_L);
 1f4:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 1f6:	28 98       	cbi	0x05, 0	; 5
 1f8:	08 95       	ret

000001fa <POWTR_TurnRight>:
/* POWTR_TurnRight
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnRight(){
	PORTD &= ~(1 << PIN_TURN_L);
 1fa:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << PIN_TURN_R);
 1fc:	28 9a       	sbi	0x05, 0	; 5
 1fe:	08 95       	ret

00000200 <POWTR_NoTurn>:

/* POWTR_NoTurn
 * Set motor driver inputs to 0 to not turn the wheels
 */
void POWTR_NoTurn(){
	PORTD &= ~(1 << PIN_TURN_L);
 200:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 202:	28 98       	cbi	0x05, 0	; 5
 204:	08 95       	ret

00000206 <POWTR_DriveForward>:
/* POWTR_DriveForward
 * Set motor driver inputs to rotate 
 * driving motor forward
 */
void POWTR_DriveForward(){
	PORTC |= (1 << PIN_FWD);
 206:	45 9a       	sbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
 208:	5c 98       	cbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 20a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 20e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 212:	4e e6       	ldi	r20, 0x6E	; 110
 214:	42 9f       	mul	r20, r18
 216:	c0 01       	movw	r24, r0
 218:	43 9f       	mul	r20, r19
 21a:	90 0d       	add	r25, r0
 21c:	11 24       	eor	r1, r1
 21e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 222:	08 95       	ret

00000224 <POWTR_DriveBackward>:
/* POWTR_DriveBackward
 * Set motor driver inputs to rotate 
 * driving motor backward
 */
void POWTR_DriveBackward(){
	PORTC &= ~(1 << PIN_FWD);
 224:	45 98       	cbi	0x08, 5	; 8
	PORTD |= (1 << PIN_BWD);
 226:	5c 9a       	sbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 228:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 22c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 230:	4e e6       	ldi	r20, 0x6E	; 110
 232:	42 9f       	mul	r20, r18
 234:	c0 01       	movw	r24, r0
 236:	43 9f       	mul	r20, r19
 238:	90 0d       	add	r25, r0
 23a:	11 24       	eor	r1, r1
 23c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 240:	08 95       	ret

00000242 <POWTR_Stop>:
 242:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/* POWTR_Stop
 * Set motor driver inputs and timer counter to 0
 */
void POWTR_Stop(){
	Timer2_SetCounter(0);
	PORTC &= ~(1 << PIN_FWD);
 246:	45 98       	cbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
 248:	5c 98       	cbi	0x0b, 4	; 11
 24a:	08 95       	ret

0000024c <POWTR_SendCommand>:
 * Params:
 *	command:	command from bluetooth module (of type enum command)
 *				related to powertrain
 */
void POWTR_SendCommand(enum commands command){
	switch(command){
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	87 30       	cpi	r24, 0x07	; 7
 250:	91 05       	cpc	r25, r1
 252:	38 f5       	brcc	.+78     	; 0x2a2 <POWTR_SendCommand+0x56>
 254:	fc 01       	movw	r30, r24
 256:	e1 5a       	subi	r30, 0xA1	; 161
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__tablejump2__>
		case FORWARD:
			POWTR_NoTurn();
 25e:	0e 94 00 01 	call	0x200	; 0x200 <POWTR_NoTurn>
			POWTR_DriveForward();
 262:	0e 94 03 01 	call	0x206	; 0x206 <POWTR_DriveForward>
			break;
 266:	08 95       	ret
		case FORWARD_LEFT:
			POWTR_TurnLeft();
 268:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <POWTR_TurnLeft>
			POWTR_DriveForward();
 26c:	0e 94 03 01 	call	0x206	; 0x206 <POWTR_DriveForward>
			break;
 270:	08 95       	ret
		case FORWARD_RIGHT:
			POWTR_TurnRight();
 272:	0e 94 fd 00 	call	0x1fa	; 0x1fa <POWTR_TurnRight>
			POWTR_DriveForward();
 276:	0e 94 03 01 	call	0x206	; 0x206 <POWTR_DriveForward>
			break;
 27a:	08 95       	ret
		case BACKWARDS:
			POWTR_NoTurn();
 27c:	0e 94 00 01 	call	0x200	; 0x200 <POWTR_NoTurn>
			POWTR_DriveBackward();
 280:	0e 94 12 01 	call	0x224	; 0x224 <POWTR_DriveBackward>
			break;
 284:	08 95       	ret
		case BACKWARDS_LEFT:
			POWTR_TurnLeft();
 286:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <POWTR_TurnLeft>
			POWTR_DriveBackward();
 28a:	0e 94 12 01 	call	0x224	; 0x224 <POWTR_DriveBackward>
			break;
 28e:	08 95       	ret
		case BACKWARDS_RIGHT:
			POWTR_TurnRight();
 290:	0e 94 fd 00 	call	0x1fa	; 0x1fa <POWTR_TurnRight>
			POWTR_DriveBackward();
 294:	0e 94 12 01 	call	0x224	; 0x224 <POWTR_DriveBackward>
			break;
 298:	08 95       	ret
		case NEUTRAL:
			POWTR_NoTurn();
 29a:	0e 94 00 01 	call	0x200	; 0x200 <POWTR_NoTurn>
			POWTR_Stop();
 29e:	0e 94 21 01 	call	0x242	; 0x242 <POWTR_Stop>
 2a2:	08 95       	ret

000002a4 <UART_init>:
	while(*StringPtr != 0x00)
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
}
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	d6 2f       	mov	r29, r22
 2aa:	c4 2f       	mov	r28, r20
 2ac:	a0 e0       	ldi	r26, 0x00	; 0
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	9c 01       	movw	r18, r24
 2c2:	ad 01       	movw	r20, r26
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	44 1f       	adc	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	44 1f       	adc	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	74 e2       	ldi	r23, 0x24	; 36
 2d8:	84 ef       	ldi	r24, 0xF4	; 244
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 95 01 	call	0x32a	; 0x32a <__udivmodsi4>
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2e8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2ec:	e2 ec       	ldi	r30, 0xC2	; 194
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	86 60       	ori	r24, 0x06	; 6
 2f4:	80 83       	st	Z, r24
 2f6:	dd 23       	and	r29, r29
 2f8:	29 f0       	breq	.+10     	; 0x304 <UART_init+0x60>
 2fa:	e1 ec       	ldi	r30, 0xC1	; 193
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 61       	ori	r24, 0x10	; 16
 302:	80 83       	st	Z, r24
 304:	cc 23       	and	r28, r28
 306:	29 f0       	breq	.+10     	; 0x312 <UART_init+0x6e>
 308:	e1 ec       	ldi	r30, 0xC1	; 193
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 83       	st	Z, r24
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <UART_available>:

bool UART_available()
{
	return (UCSR0A & (1<<RXC0));
 318:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
 31c:	88 1f       	adc	r24, r24
 31e:	88 27       	eor	r24, r24
 320:	88 1f       	adc	r24, r24
 322:	08 95       	ret

00000324 <UART_read>:

unsigned char UART_read()
{
	return UDR0;
 324:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 328:	08 95       	ret

0000032a <__udivmodsi4>:
 32a:	a1 e2       	ldi	r26, 0x21	; 33
 32c:	1a 2e       	mov	r1, r26
 32e:	aa 1b       	sub	r26, r26
 330:	bb 1b       	sub	r27, r27
 332:	fd 01       	movw	r30, r26
 334:	0d c0       	rjmp	.+26     	; 0x350 <__udivmodsi4_ep>

00000336 <__udivmodsi4_loop>:
 336:	aa 1f       	adc	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	ee 1f       	adc	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	a2 17       	cp	r26, r18
 340:	b3 07       	cpc	r27, r19
 342:	e4 07       	cpc	r30, r20
 344:	f5 07       	cpc	r31, r21
 346:	20 f0       	brcs	.+8      	; 0x350 <__udivmodsi4_ep>
 348:	a2 1b       	sub	r26, r18
 34a:	b3 0b       	sbc	r27, r19
 34c:	e4 0b       	sbc	r30, r20
 34e:	f5 0b       	sbc	r31, r21

00000350 <__udivmodsi4_ep>:
 350:	66 1f       	adc	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	88 1f       	adc	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	1a 94       	dec	r1
 35a:	69 f7       	brne	.-38     	; 0x336 <__udivmodsi4_loop>
 35c:	60 95       	com	r22
 35e:	70 95       	com	r23
 360:	80 95       	com	r24
 362:	90 95       	com	r25
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	bd 01       	movw	r22, r26
 36a:	cf 01       	movw	r24, r30
 36c:	08 95       	ret

0000036e <__tablejump2__>:
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	05 90       	lpm	r0, Z+
 374:	f4 91       	lpm	r31, Z
 376:	e0 2d       	mov	r30, r0
 378:	09 94       	ijmp

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
